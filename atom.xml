<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ybx&#39;s Blog</title>
  
  <subtitle>我是一条想变强的咸鱼！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-26T06:14:36.342Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wanna-fly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络攻防实践课堂演示</title>
    <link href="http://yoursite.com/2018/05/21/arp/"/>
    <id>http://yoursite.com/2018/05/21/arp/</id>
    <published>2018-05-20T16:00:00.000Z</published>
    <updated>2018-05-26T06:14:36.342Z</updated>
    
    <content type="html"><![CDATA[<p>内容：在虚拟机环境下，以kali系统作攻击者，win7系统作为靶机，进行内网arp攻击以及arp欺骗，实现断网，获取账密，会话劫持以及DNS欺骗。</p><h2 id="arp协议"><a href="#arp协议" class="headerlink" title="arp协议"></a>arp协议</h2><p>ARP（Address Resolution Protocol），地址解析协议 ，作用是将网络层地址（例如IP地址）转换为链路层地址（即MAC地址）。在以太网协议（数据链路层）中规定，主机之间需要通过MAC地址进行通信，但是在上层协议中，网络层和运输层只关心IP地址，所以数据链路层收到上层传递的数据包中并不包含MAC地址，为了解决这个问题，需要引入ARP协议，使得主机可以根据网络层IP数据包包头中的IP地址信息来获取相应的目标MAC地址，从而构造以太网帧实现通信。</p><a id="more"></a><p>工作流程：假设主机A和B在同一个网段，主机A要向主机B发送信息，流程如下</p><ol><li>主机A首先查看自己的ARP表查找主机B对应的ARP表项。如果找到，则直接利用ARP表中的MAC地址，对IP数据包进行帧封装，并将数据包发送给主机B。</li><li>如果未找到，则缓存当前数据报文，然后以广播方式发送一个ARP请求。ARP请求报文中的发送端IP地址和发送端MAC地址为主机A的IP地址和MAC地址，目标IP地址和目标MAC地址为主机B的IP地址和全0的MAC地址。由于ARP请求报文以广播方式发送，该网段上的所有主机都可以接收到该请求，但只有被请求的主机（即主机B）会对该请求进行处理。</li><li>主机B比对自己的IP地址和ARP请求报文中的目标IP地址，发现两者相同，则将ARP请求报文中的发送端（即主机A）的IP地址和MAC地址存入自己的ARP表中，之后以单播方式发送ARP响应报文给主机A，其中包含了自己的MAC地址。</li><li>主机A收到ARP响应报文后，将主机B的MAC地址加入到自己的ARP表中以用于后续报文的转发，同时将IP数据包进行封装后发送出去。</li></ol><p>当主机A和主机B不在同一网段时，主机A就会先向网关发出ARP请求，ARP请求报文中的目标IP地址为网关的IP地址。当主机A从收到的响应报文中获得网关的MAC地址后，将报文封装并发给网关。如果网关没有主机B的ARP表项，网关会广播ARP请求，目标IP地址为主机B的IP地址，当网关从收到的响应报文中获得主机B的MAC地址后，就可以将报文发给主机B；如果网关已经有主机B的ARP表项，网关直接把报文发给主机B。</p><h2 id="arp攻击原理"><a href="#arp攻击原理" class="headerlink" title="arp攻击原理"></a>arp攻击原理</h2><p>从arp的工作流程中可以看到，arp解析过程采用广播问询方式进行，并且在保存MAC-IP映射关系时并没有对其进行真实性的验证。此外ARP协议支持接收主动发送的ARP应答报文，同时ARP缓存表采用了老化机制，在一段时间内如果表中的某一行没有使用，就会被删除。因此基于以上特点可以构造arp攻击：攻击者主动向目标主机发送虚假的arp应答报文，污染目标的arp缓存表。</p><p>攻击流程：</p><ol><li>对目标主机进行 ARP 欺骗，声称自己是网关。</li><li>转发目标的 NAT 数据到网关，维持目标的外出数据。</li><li>对网关进行 ARP 欺骗，声称自己是目标主机。</li><li>转发网关的 NAT 数据到目标主机，维持目标的接收数据。</li><li>监听劫持或者修改目标的进入和外出数据，从而实现攻击。  </li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="demo1：断网攻击"><a href="#demo1：断网攻击" class="headerlink" title="demo1：断网攻击"></a>demo1：断网攻击</h3><p>在虚拟机中开启kali以及win7系统，网络配置为NAT模式，配置二者IP地址使其在同一网段内。桥接模式下需要手动给虚拟机分配合法IP地址，此时虚拟机相当于现实局域网中的一台真实机器。NAT模式下与宿主机共享网络连接，相当于新建一个虚拟局域网，此时宿主机不可以ping通虚拟机，但虚拟机可以ping宿主机。</p><p>使用namp扫描当前网段发现主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">namp -sP  192.168.160.0/24</div></pre></td></tr></table></figure><p>查看arp缓存命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arp -a</div></pre></td></tr></table></figure><p>开启arp攻击命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arpspoof -i eth0 -t 网关IP 目标IP//选择网卡以及目标</div></pre></td></tr></table></figure><h3 id="demo2：会话劫持"><a href="#demo2：会话劫持" class="headerlink" title="demo2：会话劫持"></a>demo2：会话劫持</h3><p>攻击者不开启ip转发时，靶机会无法接入网络，如果开启转发，则此时攻击者作为网关和靶机之间的中间人转发数据包，可以通过抓包工具对数据包进行分析。linux下ip转发功能由ip_forward文件控制（需要提前设置iptables）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">find / -name ip_forward//查找位置</div><div class="line">cd /proc/sys/net/ipv4</div><div class="line">echo 1 &gt; ip_forward//写入1表示开启转发功能</div><div class="line">cat ip_forward//回显确认</div></pre></td></tr></table></figure><p>此时使用driftnet即可将获得的数据包中的图片过滤并显示出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driftnet -i eth0</div></pre></td></tr></table></figure><p>使用ettercap工具来过滤数据包中的账号密码信息（http网站）。另外，配合sslstrip可以获取https网站密码，未成功。</p><p>sslstrip原理：</p><ul><li>攻击者嗅探客户端数据；  　</li><li>客户端向服务器端发送http请求，第三方攻击者如实转发请求；</li><li>服务器端回复https链接给客户端，攻击者收到请求并将该链接剥离为http链接回复给客户端；  　　</li><li>客户再次发送http请求给服务器端，攻击者将其改为https发送至服务器端；  　　</li><li>客户端与攻击者就建立了一个http明文链接，攻击者与服务器端建立了https加密链接，客户端的所有信息都暴露在了攻击者的视野之下 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ettercap -Tq -i eth0</div></pre></td></tr></table></figure><p>此外，还可以通过分析数据包，使用抓取的cookie伪装受害者登陆相应网站：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tcpdump -i eth0 -w cookie.cap//抓取数据包，也可以用wireshark</div><div class="line">ferret -r cookie.cap//使用ferret分析数据包并在root目录下生成hamster.txt</div><div class="line">hamster//开启代理服务器，代理设置为127.0.0.1,1234端口</div></pre></td></tr></table></figure><p>浏览器访问127.0.0.1:1234，选择target后查看cookie，选择相应的url即可实现伪装登录。之前使用cookie一直无法访问，后来发现是自己kali系统时间不正确，浏览器会认为数据包不安全而拒绝连接，也算是一个小坑。</p><h4 id="tips：kali下安装ferret踩坑记录"><a href="#tips：kali下安装ferret踩坑记录" class="headerlink" title="tips：kali下安装ferret踩坑记录"></a>tips：kali下安装ferret踩坑记录</h4><p>使用源码编译时出现编译错误，deb包安装会出现一堆未安装依赖，apt包管理器中又找不到ferret，更新源之后（阿里云，中科大以及清华）又出现hash校验和不一致无法下载的问题，最终解决方法如下：</p><p>使用vim编辑/etc/apt/source.list，添加如下更新源并保存退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deb http://ftp.cn.debian.org/kali kali-rolling main contrib non-free</div></pre></td></tr></table></figure><p> 执行如下命令，添加i386(32位)仓库，并更新列表。ferret无64位版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install ferret-sidejack:i386</div></pre></td></tr></table></figure><p>如果使用ferret命令后未出现hamster.txt，则尝试多次抓取数据包，要等待一段时间后再停止抓包。</p><h3 id="demo3：DNS欺骗"><a href="#demo3：DNS欺骗" class="headerlink" title="demo3：DNS欺骗"></a>demo3：DNS欺骗</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/ettercap/etter.conf//更改uid gid为0，删除iptables部分的注释符</div><div class="line">vim /etc/ettercap/etter.dns//添加要进行DNS欺骗的记录</div><div class="line">vim /var/www/html/index.html//spoof后的主页</div><div class="line">/etc/init.d/apache2 start//开启apache2</div></pre></td></tr></table></figure><p>使用如下命令开启DNS欺骗，-T表示字符界面，q表示安静模式，-P表示插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ettercap -Tq -i eth0 -P dns_spoof /// ///</div></pre></td></tr></table></figure><p>目标主机打开相应的网站就会被欺骗访问kali主机上的apache服务器，从而实现钓鱼等攻击。tips：这些知名网站服务器很多，域名前缀不同，最好用通配符添加dns记录，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*.qq.com A 攻击者IP</div></pre></td></tr></table></figure><h2 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h2><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><p>静态 ARP 表中 IP-MAC映射不会动态更新，一般是由管理员对网段上的每台机器进行静态登记，所以来自攻击者的ARP 欺骗报文就会被忽略。但是开发静态 ARP 表和维持表项的及时更新代价高，需要管理员付出大量工作。此种方法的缺点是必须手工设置静态 IP - MAC 地址映射，需要进行大量分散且繁琐的工作，只适合于小型局域网。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arp -s IP地址 MAC地址  类型（默认为static）//绑定</div></pre></td></tr></table></figure><h3 id="加密传输"><a href="#加密传输" class="headerlink" title="加密传输"></a>加密传输</h3><p>通常 ARP 欺骗导致数据包从受害机流向攻击方，使得网络通信被非法截取和监听。因此可以使用加密传输策略，即使攻击方得到发送的网络通信包，但是由于无法解密，不能获得机密信息，从而保证了网络传输的安全性 。</p><h3 id="采用防火墙"><a href="#采用防火墙" class="headerlink" title="采用防火墙"></a>采用防火墙</h3><p>在系统内核层拦截可能发生的外来虚假数据或本机对外的ARP攻击数据包，在保障本机不受ARP攻击的同时，减少如感染恶意程序后对外的攻击机会，保证网络畅通。</p><h3 id="划分VLAN"><a href="#划分VLAN" class="headerlink" title="划分VLAN"></a>划分VLAN</h3><p>使用虚拟子网细分网络拓扑，arp广播包无法穿透子网，从而实现隔离，缩小arp感染范围</p><h2 id="攻击检测"><a href="#攻击检测" class="headerlink" title="攻击检测"></a>攻击检测</h2><ol><li>手动检测，ping网关IP地址后，利用arp命令查看arp缓存，找到网关IP地址对应的MAC地址，然后使用局域网工具软件查看这个MAC地址对应的主机，即可找到攻击主机。</li><li>使用nbtscan扫描局域网后，如果发现有两个不同IP地址的主机所对应的MAC地址一样，则可以肯定其中有一个是盗用了另一个主机的MAC地址，只要对照一下原网关的MAC地址即可发现攻击源主机。</li></ol><h2 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h2><p>主要使用scapy库，</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容：在虚拟机环境下，以kali系统作攻击者，win7系统作为靶机，进行内网arp攻击以及arp欺骗，实现断网，获取账密，会话劫持以及DNS欺骗。&lt;/p&gt;
&lt;h2 id=&quot;arp协议&quot;&gt;&lt;a href=&quot;#arp协议&quot; class=&quot;headerlink&quot; title=&quot;arp协议&quot;&gt;&lt;/a&gt;arp协议&lt;/h2&gt;&lt;p&gt;ARP（Address Resolution Protocol），地址解析协议 ，作用是将网络层地址（例如IP地址）转换为链路层地址（即MAC地址）。在以太网协议（数据链路层）中规定，主机之间需要通过MAC地址进行通信，但是在上层协议中，网络层和运输层只关心IP地址，所以数据链路层收到上层传递的数据包中并不包含MAC地址，为了解决这个问题，需要引入ARP协议，使得主机可以根据网络层IP数据包包头中的IP地址信息来获取相应的目标MAC地址，从而构造以太网帧实现通信。&lt;/p&gt;
    
    </summary>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>密码学复习笔记之消息认证与数字签名</title>
    <link href="http://yoursite.com/2017/10/31/security5/"/>
    <id>http://yoursite.com/2017/10/31/security5/</id>
    <published>2017-10-30T16:00:00.000Z</published>
    <updated>2018-05-25T15:40:30.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>消息认证确保收到的数据确实和发送时的一样(即没有修改、插入、删除或重放)，且发送方声称的身份是真实有效的<br>三种消息认证的方法<br>1.消息加密<br>2.消息认证码（MAC）<br>3.哈希函数</p><a id="more"></a><h3 id="消息加密"><a href="#消息加密" class="headerlink" title="消息加密"></a>消息加密</h3><p>消息加密本身提供了一种认证手段</p><h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><p>接收方可以确信消息是由发送方产生的，因为除了接收方以外只有发送方拥有加密密钥，产生出用此密钥可以解密的密文</p><blockquote><p>解决解密所得消息是否具有可读性的问题:<br>要求明文具有某种易于识别的结构，如在加密前对每个消息附加一个帧校验序列FCS<br>FCS和加密函数执行的顺序很重要</p></blockquote><h4 id="公钥加密作为认证手段"><a href="#公钥加密作为认证手段" class="headerlink" title="公钥加密作为认证手段"></a>公钥加密作为认证手段</h4><p>若要提供认证，发送方用自己的私钥对消息加密，接收方用发送方的公钥解密(验证)，就提供了认证功能。<br>如果发送方用私钥加密消息，再用接收方的公钥加密，就实现了既保密又认证的通信<br>既保密又认证的通信的代价是需要执行四次复杂的公钥算法而不是两次。</p><h3 id="消息认证码MAC"><a href="#消息认证码MAC" class="headerlink" title="消息认证码MAC"></a>消息认证码MAC</h3><p>使用密钥产生短小的定长数据分组，即所谓的密码检验MAC，将它附加在报文中。通信双方A和B共享密钥K，报文从A发往B，A计算MAC=CK(M), 附在报文后发给B。B对接收到的报文重新计算MAC，并与接收到的MAC比较</p><blockquote><p>MAC加密所得的消息校验和$ MAC = C_K(M)$<br>使用一个秘密密钥K，浓缩一个变长的消息M，产生一个固定长度的认证码</p></blockquote><p>MAC不提供数字签名，因为双方共享密钥。</p><h3 id="散列函数Hash"><a href="#散列函数Hash" class="headerlink" title="散列函数Hash"></a>散列函数Hash</h3><p>一个散列函数以变长的报文M作为输入，产生定长的散列码H(M)，作为输出，亦称作报文摘要Message Digest. 散列码是报文所有比特的函数值，具有差错检测能力，报文任意一比特的改变都将引起散列码的改变</p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>数字签名与消息认证的区别<br>消息认证是使消息接收方验证消息发送者发送的内容有无被修改过，对防止第三者破坏足够，但收发双方有利害冲突时就无法解决纷争，需要更严格的手段，即数字签名。</p><h3 id="直接数字签名"><a href="#直接数字签名" class="headerlink" title="直接数字签名"></a>直接数字签名</h3><p>直接数字签名仅涉及通信方(信源、信宿) ，假定信宿知道信源的公开密钥，数字签名通过信源对整个报文用私有密钥加密，或对报文的摘要加密来实现，通常先签名，然后对消息和签名一起加密，安全性依赖于信源私有密钥的安全性（发送方要抵赖发送某一消息时，可能会声称其私有密钥丢失或被窃，从而他人伪造了他的签名）</p><h3 id="仲裁数字签名"><a href="#仲裁数字签名" class="headerlink" title="仲裁数字签名"></a>仲裁数字签名</h3><p>涉及到一个仲裁方(arbiter A)，签名方的签名报文首先送给仲裁者，仲裁者对报文和签名进行测试以检验出处和内容，然后注上日期和仲裁说明后发给接收方，要求仲裁方在一定程度上是可以信任的，可以用对称密码或公开密钥密码实现，仲裁方可以知道消息，也可以不知道消息</p><h3 id="Elgamal"><a href="#Elgamal" class="headerlink" title="Elgamal"></a>Elgamal</h3><h4 id="ELgamal加密方案"><a href="#ELgamal加密方案" class="headerlink" title="ELgamal加密方案"></a>ELgamal加密方案</h4><p>假定A和B互相通信, 共享大素数p, 本原元素α<br>    0&lt;= m &lt;= p-1, gcd(α, p) = 1, A和B各有自己的秘钥xA和xB<br>加密:<br>A选择k∈[0, p-1], k的作用即为xA, A访问公共区域找到B的公开密钥$Y^B = α^{x_B} mod p$, 计算：<br>$K = (Y^B)k mod p$，即$K = α^{x_B}k mod p$<br>$c1 = α^k mod p$<br>$c2 = m^K mod p$<br>密文即为 (c1, c2)<br>解密:<br>B首先恢复K：$K = c1^{x_B} mod p = α^{kx_B} mod p$<br>然后恢复m：$m = c_2/K mod p = c_2K^{-1} mod p$</p><h4 id="签名方案以及验证"><a href="#签名方案以及验证" class="headerlink" title="签名方案以及验证"></a>签名方案以及验证</h4><p>公钥：p:素数， g&lt;p, g是p的原根，$y=g^x (mod p)$<br>私钥：x&lt;p-1<br>签名：k:随机选取, k属于[1,p-1] 且k与p-1互素，<br>a（签名）=$g^k mod p$<br>b（签名）满足  M = (xa+kb) mod ( p-1)<br>(即有：$b = ( M-xa)k^{-1} mod (p-1) $   )<br>验证：如果 $y^a·a^b (mod p ) = g^M (mod p)$，则签名有效</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;认证&quot;&gt;&lt;a href=&quot;#认证&quot; class=&quot;headerlink&quot; title=&quot;认证&quot;&gt;&lt;/a&gt;认证&lt;/h2&gt;&lt;p&gt;消息认证确保收到的数据确实和发送时的一样(即没有修改、插入、删除或重放)，且发送方声称的身份是真实有效的&lt;br&gt;三种消息认证的方法&lt;br&gt;1.消息加密&lt;br&gt;2.消息认证码（MAC）&lt;br&gt;3.哈希函数&lt;/p&gt;
    
    </summary>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>密码学复习笔记之非对称密码</title>
    <link href="http://yoursite.com/2017/10/30/security4/"/>
    <id>http://yoursite.com/2017/10/30/security4/</id>
    <published>2017-10-29T16:00:00.000Z</published>
    <updated>2018-05-25T15:40:41.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h2><p>1.密钥管理量的困难，传统密钥n个用户需要C(n,2)=n(n-1)/2个密钥<br>2.数字签名的问题，传统加密算法无法实现抗抵赖<br>3.密钥必须通过安全信道分配，如物理硬件</p><h2 id="公钥密码简介"><a href="#公钥密码简介" class="headerlink" title="公钥密码简介"></a>公钥密码简介</h2><p>公开密钥算法是非对称算法，即密钥分为公钥和私钥，因此称双密钥体制，其中公钥可以公开，因此也称公钥算法，基于数学函数而不是代替和换位</p><a id="more"></a><h3 id="公钥密码的应用"><a href="#公钥密码的应用" class="headerlink" title="公钥密码的应用"></a>公钥密码的应用</h3><p>1.加密、解密<br>2.数字签名<br>3.密钥交换</p><h3 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h3><p>任何人向B发送信息都可以使用同一个密钥(B的公钥)加密，没有其他人可以得到B 的私钥，所以只有B可以用自己的私钥解密</p><h3 id="签名认证原理"><a href="#签名认证原理" class="headerlink" title="签名认证原理"></a>签名认证原理</h3><p>A向B发送消息X，A的公钥为KUa，私钥为KRa<br>加密： $Y = E<em>{KRa}(X) $（数字签名）<br>解密： $X = D</em>{KUa}(Y) $</p><blockquote><p>注意：不能保证消息的保密性</p></blockquote><h3 id="保密-鉴别"><a href="#保密-鉴别" class="headerlink" title="保密+鉴别"></a>保密+鉴别</h3><p>A–&gt;B:$ Z=E_{KU<em>b}(E</em>{KR<em>a}(X))$<br>B:$ E</em>{KU<em>a}(E</em>{KR_b}(Z))=X$</p><blockquote><p>公开密钥很慢，多用在密钥管理和数字签名</p></blockquote><h2 id="单向陷门函数"><a href="#单向陷门函数" class="headerlink" title="单向陷门函数"></a>单向陷门函数</h2><p>寻找合适的单向陷门函数是公钥密码体制应用的关键</p><blockquote><p>满足下列条件的函数f：<br>        (1)  给定x，计算y=f(x)是容易的<br>        (2)  给定y,  计算x使y=f(x)是困难的<br>        (3)  存在z，已知z 时, 对给定的任何y，若相应的x存 在，则计算x使y=f(x)是容易的<br>仅满足(1)、(2)两条的称为单向函数；第(3)条称为陷门性，z 称为陷门信息</p></blockquote><h2 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h2><p>RSA的安全性是基于大整数素因子分解的困难性</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现的步骤如下：Bob为实现者</p><blockquote><p> (1)  Bob寻找出两个大素数p和q<br>    (2)  Bob计算出n=pq 和φ(n)=(p-1)(q-1)<br>    (3)  Bob选择一个随机数e (0&lt;e&lt; φ(n))，满足(e,φ(n))=1<br>    (4)  Bob使用辗转相除法计算$d=e^{-1}(modφ(n))$，即ed=1(mod(p-1)(q-1))<br>    (5) （e,n)作为公钥.<br>   （6）(d,n)或者d作为私钥.</p></blockquote><p>密码分析者攻击RSA体制的关键点在于如何分解n</p><h3 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h3><p>参数T={N}；私钥SK=D；公钥PK=E；</p><blockquote><p>设：明文M，密文C，M&lt;N,那么：<br> 用公钥作业：$M^E mod N = C $(加密)<br> 用私钥作业：$C^D mod N = M$（解密）</p></blockquote><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p>1.已知φ(n)和N，求p和q<br>2.已知e，已经密文c1，c2，c3，以及N1，N2，N3，求明文（中国剩余定理）<br>三种攻击 RSA的方法:<br>1.强力穷举密钥<br>2.时间攻击：依赖解密算法的运行时间，利用CPU处理某些特殊的模乘比较慢的规律来确定每一位指数<br>3.数学攻击 ：实质上是对两个素数乘积的分解<br>密码分析者攻击RSA体制的关键点在于如何分解n<br>若分解成功使n=pq，则可以算出φ(n)＝（p-1)(q-1)，然后由公开的e，解出秘密的d<br>建议选择p和q大约是100位的十进制素数，模n的长度要求至少是512比特，为了提高加密速度，通常取e为特定的小整数<br>速度一直是RSA的缺陷。一般来说只用于少量数据加密。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题的提出&quot;&gt;&lt;a href=&quot;#问题的提出&quot; class=&quot;headerlink&quot; title=&quot;问题的提出&quot;&gt;&lt;/a&gt;问题的提出&lt;/h2&gt;&lt;p&gt;1.密钥管理量的困难，传统密钥n个用户需要C(n,2)=n(n-1)/2个密钥&lt;br&gt;2.数字签名的问题，传统加密算法无法实现抗抵赖&lt;br&gt;3.密钥必须通过安全信道分配，如物理硬件&lt;/p&gt;
&lt;h2 id=&quot;公钥密码简介&quot;&gt;&lt;a href=&quot;#公钥密码简介&quot; class=&quot;headerlink&quot; title=&quot;公钥密码简介&quot;&gt;&lt;/a&gt;公钥密码简介&lt;/h2&gt;&lt;p&gt;公开密钥算法是非对称算法，即密钥分为公钥和私钥，因此称双密钥体制，其中公钥可以公开，因此也称公钥算法，基于数学函数而不是代替和换位&lt;/p&gt;
    
    </summary>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>密码学复习笔记之数论</title>
    <link href="http://yoursite.com/2017/10/29/security2/"/>
    <id>http://yoursite.com/2017/10/29/security2/</id>
    <published>2017-10-28T16:00:00.000Z</published>
    <updated>2017-10-29T14:23:01.951Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h2><p>若（a，n）=1,则$ a^{φ(n)}=1mod n$<br>利用欧拉定理求乘法逆元<br>若φ(n)已知，则由欧拉定理可知 $a·a^{φ(n)-1}= 1 mod n $<br>$  a^{-1} = a^{φ(n)-1 }$<br><img src="/img/Euler.png" alt="Euler"><br>两个集合对应同余于模n;</p><h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><p>p为质数且，(a,n)=1,则有$ a^{p-1}=1mod n$<br>代入欧拉定理即可证明</p><h2 id="单变量线性同余"><a href="#单变量线性同余" class="headerlink" title="单变量线性同余"></a>单变量线性同余</h2><p>定理：令 a, b, n 为整数，且a&gt;0, gcd(a, n)=d<br>(1)若 d不能整除b, 则ax=b mod n 无解<br>(2)若 d能整除b, 记做d|b, 则ax=b mod n 有d个解</p><p>ax = b mod n的求解过程：</p><blockquote><p>1.利用欧几里德算法求出d=(a, n)，若d 不能整除b, 则无解。<br>2.若d能整除b, 则令：a’=a/d,b’=b/d,n’=n/d;<br>因为 (a’, n’)=1,  a’x’ =b’ mod n’ 有唯一解，假设此解为x0<br>利用欧几里德算法求出a’模n’的乘法逆元(a’)-1, x’= (a’)-1 b’ mod n’<br>x0 = x’ mod n<br>令x= x0 +(n/d)t mod n, t=1,2, …, d-1, 即可求出剩下的d-1个解      </p></blockquote><p>先求a,n 的最大公因数d，d即为解的个数，然后式子两边约去d，求出第一个x值</p><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><blockquote><p>韓信點兵問題：「今有物不知其數，三三數之剩二，五五數之剩三，七七數之剩二，問物幾何？」～(孫武 孫子算經)</p></blockquote><p><img src="/img/CRT.png" alt="CRT"></p><blockquote><p>三人同行七十稀<br>      五樹梅花廿一枝<br>      七子團圓正半月<br>      除百零五便得知。」<br>                    ～(程大位 算法統宗(1593))</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;欧拉定理&quot;&gt;&lt;a href=&quot;#欧拉定理&quot; class=&quot;headerlink&quot; title=&quot;欧拉定理&quot;&gt;&lt;/a&gt;欧拉定理&lt;/h2&gt;&lt;p&gt;若（a，n）=1,则$ a^{φ(n)}=1mod n$&lt;br&gt;利用欧拉定理求乘法逆元&lt;
      
    
    </summary>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>密码学复习笔记之数学基础</title>
    <link href="http://yoursite.com/2017/10/24/security/"/>
    <id>http://yoursite.com/2017/10/24/security/</id>
    <published>2017-10-23T16:00:00.000Z</published>
    <updated>2018-05-25T15:40:07.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Euclid算法—“辗转相除法”"><a href="#Euclid算法—“辗转相除法”" class="headerlink" title="Euclid算法—“辗转相除法”"></a>Euclid算法—“辗转相除法”</h2><p>如果b|g，b|h,对于任何整数m和n，则满足b|(mg+nh).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if c, d∈Z and c=dq+r,where q,r∈Z, then(c,d)=(d,r)</div><div class="line">proof: 1.r=c-dq, if e|c and e|d, then e|r</div><div class="line">2.c=dq+r, if e|d and e|r, then e|c</div><div class="line">=&gt;(c,d)=(d,r)</div></pre></td></tr></table></figure><a id="more"></a><p>先证明若e是c和d的因数，那么e也是d和r的因数，接着证明若e是d和r的因数，那么e也是c和d的因数，所以得c和d的公因子集合与d和r的公因子集合相等，最大公因子也相等。<br>则欧几里得算法在此基础上迭代即可</p><h2 id="同余和模运算"><a href="#同余和模运算" class="headerlink" title="同余和模运算"></a>同余和模运算</h2><p>a mod m=b, 即 a与ｂ的差是m的整数倍。 a ≡ b(mod m) </p><blockquote><p>模运算性质：<br>     令$a_1$和$a_2$为整数，OP代表操作符+、-、*，则$(a_1 OP a_2 ）mod n=[（a_1 mod n）OP（a_2 mod n)] mod n$</p></blockquote><h2 id="反复平方法"><a href="#反复平方法" class="headerlink" title="反复平方法"></a>反复平方法</h2><p>计算幂取模，将指数换算为二进制数，每个位上若为0，则对应平方，若为1，则对应平方*底数，eg：<br>计算$5^{20} mod35$ ，20 =&gt; 10100,对应$((((((1^2)·5)^2)^2)·5)^2)^2 mod35= 25$</p><h2 id="完全剩余系-amp-既约剩余系"><a href="#完全剩余系-amp-既约剩余系" class="headerlink" title="完全剩余系&amp;既约剩余系"></a>完全剩余系&amp;既约剩余系</h2><p>完全剩余系 Zn={0, 1, 2, …, n-1}(依据同余，将整数在模n中分成n类)<br>既约剩余系Zn*：在模n的完全剩余系中，所有与n互素的数形成的集合=&gt;(元素个数即为欧拉函数φ(n)对应值)</p><h2 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h2><p>在模n的既约剩余系中取一整数a,则必存在另一整数b（也属于此既约剩余系),使得ab=1modn,且此解唯一。此时，称b为a在模n的乘法逆元，b可表示为a-1</p><h3 id="欧几里得算法求乘法逆元"><a href="#欧几里得算法求乘法逆元" class="headerlink" title="欧几里得算法求乘法逆元"></a>欧几里得算法求乘法逆元</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">求143关于30的乘法逆元，即求x，使得143*x mod30=1 mod30，代换1</div><div class="line">143=30*4+23</div><div class="line">30=23*1+7</div><div class="line">23=7*3+2</div><div class="line">7=2*3+1                      </div><div class="line">2=1*2                        </div><div class="line">则gcd (143, 30)=1</div><div class="line">1=7-2*3              从1（互为乘法逆元最大公因子必为1）开始，逆向代换上一级余数  </div><div class="line"> =7-(23-7*3)*3       整理为两个乘式相减形式时代换上一级余数</div><div class="line"> =7*10-23*3</div><div class="line"> =(30-23)*10-23*3</div><div class="line"> =30*10-23*13</div><div class="line"> =30*10-(143-30*4)*13</div><div class="line"> =30*62-143*13            mod30</div><div class="line"> 143*(-13) ≡ 1(mod 30)  一定要把143提出来放前边，旨在凑出$143·x mod30=1$的形式</div></pre></td></tr></table></figure><p>求35在模3的乘法逆元</p><h3 id="欧拉函数求乘法逆元"><a href="#欧拉函数求乘法逆元" class="headerlink" title="欧拉函数求乘法逆元"></a>欧拉函数求乘法逆元</h3><h2 id="群环域"><a href="#群环域" class="headerlink" title="群环域"></a>群环域</h2><h3 id="群：集合上定义一种运算"><a href="#群：集合上定义一种运算" class="headerlink" title="群：集合上定义一种运算+"></a>群：集合上定义一种运算+</h3><p>(A1) 加法的封闭性：如果说a和b属于S，则a+b属于S<br>(A2) 加法的结合律：对S中的任意元素a,b,c，a+(b+c)=(a+b)+c<br>(A3) 加法单位元：R中存在一个元素e，使得对于S中的任意元素a，有a+e=e+a=a<br>(A4) 加法逆元：对于S中的任意元素a，S中一定存在一个元素-a，使得a+(-a)=(-a)+a=e<br>满足A1-A4即为群<br>(A5) 交换律：对于G中的任意元素a和b,有a+b=b+a<br>满足A1-到A5称为可交换群。<br>群G的一个生成元素g的幂次构成G群，即G={e，g，g2 ，…，gn}则称G为循环群。<br>如果一个群的元素是有限的，则该群称为有限群，且群的阶等于群中元素的个数；否则称为无限群</p><h3 id="环：集合上定义两种运算"><a href="#环：集合上定义两种运算" class="headerlink" title="环：集合上定义两种运算"></a>环：集合上定义两种运算</h3><p>非空集合R中，若定义了两种代数运算加和乘，且满足：<br>(M1) 乘法的封闭性:如果a和b属于R，则ab属于R<br>(M2) 乘法的结合率：对于R中的任意元素a,b,c，有a(bc)=(ab)c<br>(M3) 分配律：对于R中的任意元素a,b,c，有a(b+c)=ab+ac和(a+b)c=ac+bc</p><p>(M4) 乘法交换律:对于R中的任意元素a和b，ab=ba</p><p>(M5) 乘法单位元：对于F中的任意元素a，在F中存在一个元素i,使得ai=ia=a<br>(M6) 无零因子：对于F中的元素a,b，若ab=0，则有a=0或b=0<br>[A1-M6]：整环<br>(M7)乘法逆元：如果a属于F,且a不为0，则F中存在一个元素$a^{-1}$, 使得$a·a^{-1}=a^{-1}·a=1$<br>[A1-M7]：域 多一个乘法逆元</p><h2 id="多项式运算"><a href="#多项式运算" class="headerlink" title="多项式运算"></a>多项式运算</h2><h3 id="系数在-Z-p-上的运算"><a href="#系数在-Z-p-上的运算" class="headerlink" title="系数在$ Z_p $上的运算"></a>系数在$ Z_p $上的运算</h3><p>系数模上p即可</p><h3 id="系数在-GF-2-n-中的运算"><a href="#系数在-GF-2-n-中的运算" class="headerlink" title="系数在$ GF(2^n) $中的运算"></a>系数在$ GF(2^n) $中的运算</h3><h4 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h4><p>$(x^2+1) + (x^2+x+1) = x $<br>$ 101 XOR 111 = 010_2$</p><h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><p>$(x+1)·(x^2+1)  = x^3+x^2+x+1 $<br> $011·101 = 011 XOR 101 = 1111_2 $</p><h4 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h4><p> $(x^3+x^2+x+1 ) mod (x^3+x+1) = 1·(x^3+x+1) + (x^2) = x^2$<br> $1111 mod 1011 = 1111 XOR 1011 = 0100_2$</p><p>如果乘法运算的结果是次数大于n-1的多项式，那么必须将其除以某个次数为n的既约多项式m(x)并取余式</p><p>例题 计算多项式的乘法逆元</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Euclid算法—“辗转相除法”&quot;&gt;&lt;a href=&quot;#Euclid算法—“辗转相除法”&quot; class=&quot;headerlink&quot; title=&quot;Euclid算法—“辗转相除法”&quot;&gt;&lt;/a&gt;Euclid算法—“辗转相除法”&lt;/h2&gt;&lt;p&gt;如果b|g，b|h,对于任何整数m和n，则满足b|(mg+nh).&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;if c, d∈Z and c=dq+r,where q,r∈Z, then(c,d)=(d,r)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;proof: 1.r=c-dq, if e|c and e|d, then e|r&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	2.c=dq+r, if e|d and e|r, then e|c&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	=&amp;gt;(c,d)=(d,r)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>CSS初步学习</title>
    <link href="http://yoursite.com/2017/10/23/CSS1/"/>
    <id>http://yoursite.com/2017/10/23/CSS1/</id>
    <published>2017-10-22T16:00:00.000Z</published>
    <updated>2017-10-25T12:37:59.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><p>CSS规则由两个主要的部分构成：选择器，以及一条或多条声明，选择器通常是需要改变样式的HTML元素。每条声明由一个属性和一个值组成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span></div><div class="line">&#123;</div><div class="line"><span class="attribute">color</span>:red;</div><div class="line"><span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="id和class选择器"><a href="#id和class选择器" class="headerlink" title="id和class选择器"></a>id和class选择器</h2><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>id 选择器可以为标有特定id的HTML元素指定特定的样式,以 “#” 来定义。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#para1</span></div><div class="line">&#123;</div><div class="line"><span class="attribute">text-align</span>:center;</div><div class="line"><span class="attribute">color</span>:red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>class 选择器用于描述一组元素的样式，可以在多个元素中使用，以一个点”.”号显示<br><code>.center {text-align:center;}</code></p><p>也可以指定特定的HTML元素使用class,如下所有的p元素使用class=”center” 让该元素的文本居中<br><code>CSSp.center {text-align:center;}</code></p><h2 id="CSS创建"><a href="#CSS创建" class="headerlink" title="CSS创建"></a>CSS创建</h2><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><p>外部样式表就是新建一个文档，里面全写css，然后再通过 link 插入到html 代码中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure><p>rel=”stylesheet”是告诉浏览器link进来的是个样式表文件</p><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><p>直接使用 style 标签在文档头部定义内部样式表，eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-tag">hr</span> &#123;<span class="attribute">color</span>:sienna;&#125;</span></div><div class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125;</span></div><div class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"images/back40.gif"</span>);&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>当样式仅需要在一个元素上应用一次时,直接在相关标签内使用style属性<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p style="color:sienna;margin-left:20px"&gt;这是一个段落。&lt;/p&gt;</div></pre></td></tr></table></figure></p><h3 id="多重样式"><a href="#多重样式" class="headerlink" title="多重样式"></a>多重样式</h3><p>内部样式表中不含有而外部样式表中含有的属性被直接继承，其余的属性由内部样式表中指定的取代<br>一般情况下，优先级如下： </p><blockquote><p>内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式<br>如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CSS背景属性</p><table><thead><tr><th>Property</th><th>描述</th></tr></thead><tbody><tr><td>background</td><td>简写属性，作用是将背景属性设置在一个声明中</td></tr><tr><td>background-attachment</td><td>背景图像是否固定或者随着页面的其余部分滚动</td></tr><tr><td>background-color</td><td>设置元素的背景颜色</td></tr><tr><td>background-image</td><td>把图像设置为背景</td></tr><tr><td>background-position</td><td>设置背景图像的起始位置</td></tr><tr><td>background-repeat</td><td>设置背景图像是否及如何重复</td></tr></tbody></table><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:<span class="number">#b0c4de</span>;&#125;</div></pre></td></tr></table></figure><p>颜色可以是十六进制，RGB，颜色名称</p><h3 id="背景图像"><a href="#背景图像" class="headerlink" title="背景图像"></a>背景图像</h3><p>默认情况下，背景图像进行平铺重复显示<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span></div><div class="line">&#123;</div><div class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'gradient2.png'</span>);</div><div class="line"><span class="attribute">background-repeat</span>:repeat-x;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>设置为只在水平方向平铺<br>background-repeat:no-repeat;可以设置为不平铺。<br>background-position:right top;设置图像在背景中的位置  </p><blockquote><p>可能的值有<br>1.top center bottom和left center right的组合<br>2.x% y% 水平位置和垂直位置，左上角是0% 0%<br>3.x y 单位是像素px或其他css单位</p><h3 id="背景简写属性"><a href="#背景简写属性" class="headerlink" title="背景简写属性"></a>背景简写属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background</span>:<span class="number">#ffffff</span> <span class="built_in">url</span>(<span class="string">'img_tree.png'</span>) no-repeat right top;&#125;</div></pre></td></tr></table></figure></blockquote><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h3><p>可以用十六进制，RGB值和颜色名称来指定文字颜色</p><h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><p>text-align 值left，right,center<br>当text-align设置为”justify”，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。</p><h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><p>text-decoration 属性用来设置或删除文本的装饰。none<br>overline，line-through，underline，对应上划线，字上划线和下划线</p><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><p>text-indent用来指定文本第一行的缩进，单位用px，cm等</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>在计算机屏幕上，sans-serif字体被认为是比serif字体容易阅读，没有末端装饰</p><h3 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h3><p>font-family设置文本的字体系列<br>font-size设置文字大小与像素，可用em代替px，1em和当前字体大小相等。在浏览器中默认的文字大小是16px。因此，1em的默认大小是16px<br>也可以用百分比设置</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>a:link - 正常，未访问过的链接<br>a:visited - 用户已访问过的链接<br>a:hover - 当用户鼠标放在链接上时<br>a:active - 链接被点击的那一刻<br>a:hover 必须跟在 a:link 和 a:visited后面<br>a:active 必须跟在 a:hover后面<br>text-decoration 属性主要用于删除链接中的下划线</p><h2 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>list-style</td><td>简写属性。用于把所有用于列表的属性设置于一个声明中</td></tr><tr><td>list-style-image</td><td>将图象设置为列表项标志。</td></tr><tr><td>list-style-position</td><td>设置列表中列表项标志的位置。</td></tr><tr><td>list-style-type</td><td>设置列表项标志的类型。</td></tr></tbody></table><p>eg：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span><span class="selector-class">.a</span> &#123;<span class="attribute">list-style-type</span>: circle;&#125;</div><div class="line"><span class="selector-tag">ul</span><span class="selector-class">.b</span> &#123;<span class="attribute">list-style-type</span>: square;&#125;</div><div class="line"><span class="selector-tag">ol</span><span class="selector-class">.c</span> &#123;<span class="attribute">list-style-type</span>: upper-roman;&#125;</div><div class="line"><span class="selector-tag">ol</span><span class="selector-class">.d</span> &#123;<span class="attribute">list-style-type</span>: lower-alpha;&#125;</div><div class="line"><span class="selector-tag">ul</span> &#123; <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">'sqpurple.gif'</span>);&#125;</div></pre></td></tr></table></figure></p><h2 id="table表格"><a href="#table表格" class="headerlink" title="table表格"></a>table表格</h2><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><strong>Margin(外边距)</strong>  - 清除边框外的区域，外边距是透明的。<br><strong>Border(边框)</strong>    - 围绕在内边距和内容外的边框。<br><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。<br><strong>Content(内容)</strong>   - 盒子的内容，显示文本和图像。<br>类比墙上挂一个大相框，相框与墙之间的边距即为margin，相框边为border，相片内容与相框内沿边距为padding<br>当指定一个CSS元素的宽度和高度属性时，所设置的是内容区域的宽度和高度，需要减去四周边距<br>使用border-style来定义边框的样式<br>轮廓相当于相框的外边沿<br>border，margin等可以在各方向上单独设置</p><p>代码区块不匹配可在代码结束位置加空行更正</p><p>从网页中提取背景图片:<br>右键-&gt;检查元素，在下方开发者工具右侧，找到style/样式，查找background下url，输入地址访问，右键保存</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS语法&quot;&gt;&lt;a href=&quot;#CSS语法&quot; class=&quot;headerlink&quot; title=&quot;CSS语法&quot;&gt;&lt;/a&gt;CSS语法&lt;/h2&gt;&lt;p&gt;CSS规则由两个主要的部分构成：选择器，以及一条或多条声明，选择器通常是需要改变样式的HTML元素。每条声明由一个属性和一个值组成&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:center;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>mongodb学习</title>
    <link href="http://yoursite.com/2017/10/22/mongodb/"/>
    <id>http://yoursite.com/2017/10/22/mongodb/</id>
    <published>2017-10-22T12:58:23.062Z</published>
    <updated>2017-10-22T13:36:56.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h2><table><thead><tr><th>SQL术语/概念</th><th>MongoDB术语/概念</th><th>解释/说明</th></tr></thead><tbody><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr></tbody></table><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> DATABASE_NAME</div></pre></td></tr></table></figure><a id="more"></a><p>如果数据库不存在，则创建数据库，否则切换到指定数据库。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase()</div></pre></td></tr></table></figure></p><p>删除当前数据库(使用 db 命令查看当前数据库名。)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.collection.drop()</div></pre></td></tr></table></figure><p>删除集合<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.insert(document)</div></pre></td></tr></table></figure></p><p>向集合中插入文档，使用 insert() 或 save() 方法。如果该集合不存在，mongoDb会自动创建该集合并插入文档<br>3.2版本后还有以下语法可用于插入文档:</p><blockquote><p>db.collection.insertOne():向指定集合中插入一条文档数据<br>db.collection.insertMany():向指定集合中插入多条文档数据</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.col.update(&#123;'title':'MongoDB 教程'&#125;,&#123;$set:&#123;'title':'MongoDB'&#125;&#125;)</div></pre></td></tr></table></figure><p>更新语句示例，如果修改多条相同的文档，需要设置 multi 参数为 true。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.col.update(&#123;'title':'MongoDB 教程'&#125;,&#123;$set:&#123;'title':'MongoDB'&#125;&#125;,&#123;multi:true&#125;)</div></pre></td></tr></table></figure></p><p>save() 方法通过传入的文档来替换已有文档来更新数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.collection.remove()</div></pre></td></tr></table></figure></p><p>删除</p><blockquote><p>db.col.find().pretty()<br>pretty() 方法以格式化的方式来显示所有文档。</p></blockquote><p>查询键 by 值为 菜鸟教程 或键 title 值为 MongoDB 教程 的文档。</p><blockquote><p>db.col.find({$or:[{“by”:”菜鸟教程”},{“title”: “MongoDB 教程”}]}).pretty()</p></blockquote><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h2><table><thead><tr><th>操作符</th><th>解释</th><th>含义</th></tr></thead><tbody><tr><td>$gt</td><td>greater than</td><td>&gt;</td></tr><tr><td>$gte</td><td>gt equal</td><td>&gt;=</td></tr><tr><td>$lt</td><td>less than</td><td>&lt;</td></tr><tr><td>$lte</td><td>lt equal</td><td>&lt;=</td></tr><tr><td>$ne</td><td>not equal</td><td>!=</td></tr><tr><td>$eq</td><td>equal</td><td>=</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念解析&quot;&gt;&lt;a href=&quot;#概念解析&quot; class=&quot;headerlink&quot; title=&quot;概念解析&quot;&gt;&lt;/a&gt;概念解析&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SQL术语/概念&lt;/th&gt;
&lt;th&gt;MongoDB术语/概念&lt;/th&gt;
&lt;th&gt;解释/说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;collection&lt;/td&gt;
&lt;td&gt;数据库表/集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;row&lt;/td&gt;
&lt;td&gt;document&lt;/td&gt;
&lt;td&gt;数据记录行/文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;column&lt;/td&gt;
&lt;td&gt;field&lt;/td&gt;
&lt;td&gt;数据字段/域&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;增删改查&quot;&gt;&lt;a href=&quot;#增删改查&quot; class=&quot;headerlink&quot; title=&quot;增删改查&quot;&gt;&lt;/a&gt;增删改查&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; DATABASE_NAME&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>node.js学习笔记(二)--动手实例</title>
    <link href="http://yoursite.com/2017/10/21/note2/"/>
    <id>http://yoursite.com/2017/10/21/note2/</id>
    <published>2017-10-20T16:00:00.000Z</published>
    <updated>2017-10-21T08:33:24.982Z</updated>
    
    <content type="html"><![CDATA[<p>学习建立一个简易微博系统</p><h2 id="1-开始"><a href="#1-开始" class="headerlink" title="1.开始"></a>1.开始</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">express -e ejs ‘projectname’</div></pre></td></tr></table></figure><p>建立项目文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p><p>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node ./bin/www</div></pre></td></tr></table></figure></p><p>express4需要以此命令来启动,node app.js 无法启动。？？留个坑<br><a id="more"></a></p><blockquote><p>app.set 是 Express 的参数设置工具，接受一个键（key）和一个值（value）</p><ul><li>basepath：基础地址，通常用于 res.redirect() 跳转。</li><li>views：视图文件的目录，存放模板文件。</li><li>view engine：视图模板引擎。</li><li>view options：全局视图参数对象。</li><li>view cache：启用视图缓存。</li></ul></blockquote><p>app.get(‘/‘,routes.index);路由控制器，用户如果访问”/“路径，则由routes.index 来控制它接受两个参数，第一个参数是请求的路径，第二个参数是一个回调函数，该路由规则被触发时调用回调函数，其参数表传递两个参数，分别是req和res，表示请求信息和响应信息</p><blockquote><p>req<br>    req.params.name             -&gt;/user/:name<br>    req.query.name              -&gt;/user?name=shiyq<br>    req.body.name               -&gt;名称为name的表单输入值<br>    req.cookie.name             -&gt;cookie的name属性<br>res<br>    res.cookie(name,value)      -&gt;设置cookie<br>    res.redirect(‘/foo/bar’)    -&gt;跳转到/foo/bar<br>    res.location(‘foo/bar’)     -&gt;类似redirect<br>    res.send(‘name’)            -&gt;向浏览器输出<br>    res.json()                  -&gt;向浏览器返回json数据<br>    res.render(view, [locals], callback)  -&gt;转向view，并携带变量<br>    res.end()                   -&gt;结束输出</p></blockquote><p>app.use和app.get<br>app.get相当于app.use的一个实现</p><blockquote><p>app.js 中通过 app.get(‘/‘, routes.index); 将“/ ”路径映射到 exports.index<br>函数下。其中只有一个语句 res.render(‘index’, { title: ‘Express’ })，功能是<br>调用模板解析引擎，翻译名为 index 的模板，并传入一个对象作为参数</p><p>app.get(‘/‘, routes.index)，规定路径为“ /”的 GET 请求由 routes.index 函数处理。 routes.index 通过 res.render(‘index’, { title: ‘Express’ }) 调用视图模板 index，传递 title变量。最终视图模板生成 HTML 页面，返回给浏览器，</p></blockquote><p>浏览器发起请求，由路由控制器接受，根据不同的路径定向到不同的控制器。控制器处理用户的具体请求，可能会访问数据库中的对象，即模型部分.控制器还要访问模板引擎，生成视图的 HTML，最后再由控制器返回给浏览器。</p><h2 id="2-路由规则"><a href="#2-路由规则" class="headerlink" title="2.路由规则"></a>2.路由规则</h2><table><thead><tr><th>请求方式</th><th>功能</th><th>绑定函数</th></tr></thead><tbody><tr><td> GET</td><td>获取</td><td>app.get(path,callback)</td></tr><tr><td> POST</td><td>新增</td><td>app.get(path,callback)</td></tr><tr><td> PUT</td><td>更新</td><td>app.get(path,callback)</td></tr><tr><td> DELETE</td><td>删除</td><td>app.get(path,callback)</td></tr></tbody></table><p>app.all 函数，它支持把所有的请求方式绑定到同一个响应函数，</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>在路由routes/index.js下res.render的功能是调用模板引擎，并将其产生的页面直接返回给客户端。它接受两个参数，第一个是模板的名称，即views目录下的模板文件名，不包含文件的扩展名；第二个参数是传递给模板的数据，用于模板翻译</p><h3 id="ejs三种标签"><a href="#ejs三种标签" class="headerlink" title="ejs三种标签"></a>ejs三种标签</h3><ol><li>&lt;% code %&gt;： JavaScript 代码</li><li>&lt;%= code %&gt;：显示转义后的 HTML内容</li><li>&lt;%- code %&gt;：显示原始 HTML 内容</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习建立一个简易微博系统&lt;/p&gt;
&lt;h2 id=&quot;1-开始&quot;&gt;&lt;a href=&quot;#1-开始&quot; class=&quot;headerlink&quot; title=&quot;1.开始&quot;&gt;&lt;/a&gt;1.开始&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;express -e ejs ‘projectname’&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;建立项目文件&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;node ./bin/www&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;express4需要以此命令来启动,node app.js 无法启动。？？留个坑&lt;br&gt;
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>node.js学习笔记(一)</title>
    <link href="http://yoursite.com/2017/10/20/note1/"/>
    <id>http://yoursite.com/2017/10/20/note1/</id>
    <published>2017-10-20T02:00:00.000Z</published>
    <updated>2018-05-25T15:41:06.031Z</updated>
    
    <content type="html"><![CDATA[<p>node.js核心模块学习</p><h2 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h2><blockquote><p>Node.js标准库提供了http模块，其中封装了一个高效的HTTP服务器和一个简易的HTTP客户端。http.Server是一个基于事件的HTTP服务器，它的核心由Node.js下层C++部分实现，而接口由JavaScript封装，兼顾了高性能与简易性。http.request则是一个HTTP客户端工具，用于向HTTP服务器发起请求。</p></blockquote><h3 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h3><a id="more"></a><p>http.Server是http模块中的HTTP服务器对象，是一个基于事件的HTTP服务器，所有的请求都被封装为独立的事件，它继承自EventEmitter，提供了以下几个事件</p><ul><li>request：当客户端请求到来时，该事件被触发，提供两个参数req和res，分别是http.ServerRequest和http.ServerResponse的实例，表示请求和响应信息。</li><li>connection：当 TCP 连接建立时，该事件被触发，提供一个参数 socket，为net.Socket 的实例。</li><li>close ：当服务器关闭时，该事件被触发。</li></ul><p>对于request事件，http提供了一个捷径：http.createServer([<br>requestListener]),功能是创建一个HTTP服务器并将requestListener作为request 事件的监听函数。</p><p>使用http实现服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">res.write(<span class="string">'&lt;h1&gt;Node.js&lt;/h1&gt;'</span>);</div><div class="line">res.end(<span class="string">'&lt;p&gt;Hello World&lt;/p&gt;'</span>);</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"HTTP server is listening at port 3000."</span>);</div></pre></td></tr></table></figure><p>事实上的显式方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>); </div><div class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> http.Server();</div><div class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; res.writeHead(<span class="number">200</span>, </div><div class="line">&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</div><div class="line">res.write(<span class="string">'&lt;h1&gt;Node.js&lt;/h1&gt;'</span>); </div><div class="line">res.end(<span class="string">'&lt;p&gt;Hello World&lt;/p&gt;'</span>); &#125;);</div><div class="line">server.listen(<span class="number">3000</span>); </div><div class="line"><span class="built_in">console</span>.log(<span class="string">"HTTP server is listening at port 3000."</span>);</div></pre></td></tr></table></figure><h4 id="http-ServerRequest"><a href="#http-ServerRequest" class="headerlink" title="http.ServerRequest"></a>http.ServerRequest</h4><p>http.ServerRequest 是 HTTP 请求的信息，它一般由http.Server 的<br>request 事件发送，作为第一个参数传递，通常简称 request 或 req。 http.ServerRequest 提供了以下3个事件用于控制请求体传输</p><ul><li><p>data ：当请求体数据到来时，该事件被触发。该事件提供一个参数 chunk，表示接收到的数据。如果该事件没有被监听，那么请求体将会被抛弃。该事件可能会被调用多次。</p></li><li><p>end ：当请求体数据传输完成时，该事件被触发，此后将不会再有数据到来。</p></li><li>close： 用户当前请求结束时，该事件被触发。不同于 end，如果用户强制终止了传输，也还是调用close。</li></ul><h4 id="http-ServerResponse"><a href="#http-ServerResponse" class="headerlink" title="http.ServerResponse"></a>http.ServerResponse</h4><p>http.ServerResponse是返回给客户端的信息，决定了用户最终能看到的结果。它也是由 http.Server 的 request 事件发送的，作为第二个参数传递，一般简称为response 或 res。<br>http.ServerResponse 有三个重要的成员函数，用于返回响应头、响应内容以及结束请求。</p><ul><li><p>response.writeHead(statusCode, [headers])：向请求的客户端发送响应头。statusCode是HTTP状态码，如200（请求成功）、404（未找到）等。headers是一个类似关联数组的对象，表示响应头的每个属性。</p></li><li><p>response.write(data, [encoding])：向请求的客户端发送响应内容。 data 是一个 Buffer 或字符串，表示要发送的内容。如果data是字符串，那么需要指定encoding 来说明它的编码方式，默认是 utf-8。</p></li><li><p>response.end([data], [encoding])：结束响应，告知客户端所有发送已经完成。</p></li></ul><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>http 模块提供了两个函数 http.request 和 http.get，功能是作为客户端向 HTTP服务器发起请求</p><h3 id="http-request"><a href="#http-request" class="headerlink" title="http.request"></a>http.request</h3><p>http.request(options, callback)<br>发起HTTP请求。接受两个参数，option是一个类似关联数组的对象，表示请求的参数，callback是请求的回调函数。</p><p>option常用的参数:</p><ul><li>host ：请求网站的域名或 IP 地址。</li><li>port ：请求网站的端口，默认 80。</li><li>method ：请求方法，默认是 GET。</li><li>path ：请求的相对于根的路径，默认是“ /”。 QueryString 应该包含在其中。</li><li>headers ：一个关联数组对象，为请求头的内容。</li></ul><p>callback传递一个参数,为http.ClientResponse的实例。http.request返回一个http.ClientRequest的实例。</p><h3 id="http-get"><a href="#http-get" class="headerlink" title="http.get"></a>http.get</h3><p>http.get(options, callback) http 模块还提供了一个更加简便的方法用于处理GET请求：http.get。它是 http.request 的简化版，唯一的区别在于http.get自动将请求方法设为了 GET 请求，同时不需要手动调用 req.end()。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;node.js核心模块学习&lt;/p&gt;
&lt;h2 id=&quot;HTTP模块&quot;&gt;&lt;a href=&quot;#HTTP模块&quot; class=&quot;headerlink&quot; title=&quot;HTTP模块&quot;&gt;&lt;/a&gt;HTTP模块&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Node.js标准库提供了http模块，其中封装了一个高效的HTTP服务器和一个简易的HTTP客户端。http.Server是一个基于事件的HTTP服务器，它的核心由Node.js下层C++部分实现，而接口由JavaScript封装，兼顾了高性能与简易性。http.request则是一个HTTP客户端工具，用于向HTTP服务器发起请求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;HTTP服务器&quot;&gt;&lt;a href=&quot;#HTTP服务器&quot; class=&quot;headerlink&quot; title=&quot;HTTP服务器&quot;&gt;&lt;/a&gt;HTTP服务器&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>第二天</title>
    <link href="http://yoursite.com/2017/10/19/second-blog/"/>
    <id>http://yoursite.com/2017/10/19/second-blog/</id>
    <published>2017-10-19T04:00:00.000Z</published>
    <updated>2017-10-22T13:42:49.784Z</updated>
    
    <content type="html"><![CDATA[<p>测试用博客</p><h2 id="需要完善的地方"><a href="#需要完善的地方" class="headerlink" title="需要完善的地方"></a>需要完善的地方</h2><p> 添加阅读全文，显示文章一部分</p><p> 添加评论留言功能</p><h2 id="后续任务"><a href="#后续任务" class="headerlink" title="后续任务"></a>后续任务</h2><p> nodejs学习</p> <a id="more"></a><p> 搭建网站</p><p> 捋一捋搭建步骤</p><ol><li>搭建环境，node.js，git，github账户及pages，ssh配置</li><li>安装hexo，配置本地blog文件夹，配置deployment到github</li><li>安装主题（Next）并配置个性设置</li><li>绑定域名，添加解析记录</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试用博客&lt;/p&gt;
&lt;h2 id=&quot;需要完善的地方&quot;&gt;&lt;a href=&quot;#需要完善的地方&quot; class=&quot;headerlink&quot; title=&quot;需要完善的地方&quot;&gt;&lt;/a&gt;需要完善的地方&lt;/h2&gt;&lt;p&gt; 添加阅读全文，显示文章一部分&lt;/p&gt;
&lt;p&gt; 添加评论留言功能&lt;/p&gt;
&lt;h2 id=&quot;后续任务&quot;&gt;&lt;a href=&quot;#后续任务&quot; class=&quot;headerlink&quot; title=&quot;后续任务&quot;&gt;&lt;/a&gt;后续任务&lt;/h2&gt;&lt;p&gt; nodejs学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="Test" scheme="http://yoursite.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>helloworld</title>
    <link href="http://yoursite.com/2017/10/18/hello-world/"/>
    <id>http://yoursite.com/2017/10/18/hello-world/</id>
    <published>2017-10-18T12:00:00.000Z</published>
    <updated>2018-05-25T15:39:21.549Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客<a href="https://wannafly.xyz/" target="_blank" rel="external">https://wannafly.xyz/</a>! This is my first blog.</p><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><h2 id="今天搭建博客遇到的问题"><a href="#今天搭建博客遇到的问题" class="headerlink" title="今天搭建博客遇到的问题"></a>今天搭建博客遇到的问题</h2><p>CNAME文件应在根目录source文件夹下创建，直接在github上创建会自动删除<br>参考<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="external">教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎来到我的博客&lt;a href=&quot;https://wannafly.xyz/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://wannafly.xyz/&lt;/a&gt;! This is my first blog.&lt;/p&gt;
&lt;blockquote&gt;
      
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
</feed>
