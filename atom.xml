<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ybx&#39;s Blog</title>
  
  <subtitle>天空没有留下翅膀的痕迹，但我已然飞过</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-22T13:36:56.818Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wanna-fly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongodb学习</title>
    <link href="http://yoursite.com/2017/10/22/mongodb/"/>
    <id>http://yoursite.com/2017/10/22/mongodb/</id>
    <published>2017-10-22T12:58:23.062Z</published>
    <updated>2017-10-22T13:36:56.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h2><table><thead><tr><th>SQL术语/概念</th><th>MongoDB术语/概念</th><th>解释/说明</th></tr></thead><tbody><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr></tbody></table><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> DATABASE_NAME</div></pre></td></tr></table></figure><a id="more"></a><p>如果数据库不存在，则创建数据库，否则切换到指定数据库。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase()</div></pre></td></tr></table></figure></p><p>删除当前数据库(使用 db 命令查看当前数据库名。)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.collection.drop()</div></pre></td></tr></table></figure><p>删除集合<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.insert(document)</div></pre></td></tr></table></figure></p><p>向集合中插入文档，使用 insert() 或 save() 方法。如果该集合不存在，mongoDb会自动创建该集合并插入文档<br>3.2版本后还有以下语法可用于插入文档:</p><blockquote><p>db.collection.insertOne():向指定集合中插入一条文档数据<br>db.collection.insertMany():向指定集合中插入多条文档数据</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.col.update(&#123;'title':'MongoDB 教程'&#125;,&#123;$set:&#123;'title':'MongoDB'&#125;&#125;)</div></pre></td></tr></table></figure><p>更新语句示例，如果修改多条相同的文档，需要设置 multi 参数为 true。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.col.update(&#123;'title':'MongoDB 教程'&#125;,&#123;$set:&#123;'title':'MongoDB'&#125;&#125;,&#123;multi:true&#125;)</div></pre></td></tr></table></figure></p><p>save() 方法通过传入的文档来替换已有文档来更新数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.collection.remove()</div></pre></td></tr></table></figure></p><p>删除</p><blockquote><p>db.col.find().pretty()<br>pretty() 方法以格式化的方式来显示所有文档。</p></blockquote><p>查询键 by 值为 菜鸟教程 或键 title 值为 MongoDB 教程 的文档。</p><blockquote><p>db.col.find({$or:[{“by”:”菜鸟教程”},{“title”: “MongoDB 教程”}]}).pretty()</p></blockquote><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h2><table><thead><tr><th>操作符</th><th>解释</th><th>含义</th></tr></thead><tbody><tr><td>$gt</td><td>greater than</td><td>&gt;</td></tr><tr><td>$gte</td><td>gt equal</td><td>&gt;=</td></tr><tr><td>$lt</td><td>less than</td><td>&lt;</td></tr><tr><td>$lte</td><td>lt equal</td><td>&lt;=</td></tr><tr><td>$ne</td><td>not equal</td><td>!=</td></tr><tr><td>$eq</td><td>equal</td><td>=</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念解析&quot;&gt;&lt;a href=&quot;#概念解析&quot; class=&quot;headerlink&quot; title=&quot;概念解析&quot;&gt;&lt;/a&gt;概念解析&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SQL术语/概念&lt;/th&gt;
&lt;th&gt;MongoDB术语/概念&lt;/th&gt;
&lt;th&gt;解释/说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;collection&lt;/td&gt;
&lt;td&gt;数据库表/集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;row&lt;/td&gt;
&lt;td&gt;document&lt;/td&gt;
&lt;td&gt;数据记录行/文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;column&lt;/td&gt;
&lt;td&gt;field&lt;/td&gt;
&lt;td&gt;数据字段/域&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;增删改查&quot;&gt;&lt;a href=&quot;#增删改查&quot; class=&quot;headerlink&quot; title=&quot;增删改查&quot;&gt;&lt;/a&gt;增删改查&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; DATABASE_NAME&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>node.js学习笔记(二)--动手实例</title>
    <link href="http://yoursite.com/2017/10/21/note2/"/>
    <id>http://yoursite.com/2017/10/21/note2/</id>
    <published>2017-10-20T16:00:00.000Z</published>
    <updated>2017-10-21T08:33:24.982Z</updated>
    
    <content type="html"><![CDATA[<p>学习建立一个简易微博系统</p><h2 id="1-开始"><a href="#1-开始" class="headerlink" title="1.开始"></a>1.开始</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">express -e ejs ‘projectname’</div></pre></td></tr></table></figure><p>建立项目文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p><p>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node ./bin/www</div></pre></td></tr></table></figure></p><p>express4需要以此命令来启动,node app.js 无法启动。？？留个坑<br><a id="more"></a></p><blockquote><p>app.set 是 Express 的参数设置工具，接受一个键（key）和一个值（value）</p><ul><li>basepath：基础地址，通常用于 res.redirect() 跳转。</li><li>views：视图文件的目录，存放模板文件。</li><li>view engine：视图模板引擎。</li><li>view options：全局视图参数对象。</li><li>view cache：启用视图缓存。</li></ul></blockquote><p>app.get(‘/‘,routes.index);路由控制器，用户如果访问”/“路径，则由routes.index 来控制它接受两个参数，第一个参数是请求的路径，第二个参数是一个回调函数，该路由规则被触发时调用回调函数，其参数表传递两个参数，分别是req和res，表示请求信息和响应信息</p><blockquote><p>req<br>    req.params.name             -&gt;/user/:name<br>    req.query.name              -&gt;/user?name=shiyq<br>    req.body.name               -&gt;名称为name的表单输入值<br>    req.cookie.name             -&gt;cookie的name属性<br>res<br>    res.cookie(name,value)      -&gt;设置cookie<br>    res.redirect(‘/foo/bar’)    -&gt;跳转到/foo/bar<br>    res.location(‘foo/bar’)     -&gt;类似redirect<br>    res.send(‘name’)            -&gt;向浏览器输出<br>    res.json()                  -&gt;向浏览器返回json数据<br>    res.render(view, [locals], callback)  -&gt;转向view，并携带变量<br>    res.end()                   -&gt;结束输出</p></blockquote><p>app.use和app.get<br>app.get相当于app.use的一个实现</p><blockquote><p>app.js 中通过 app.get(‘/‘, routes.index); 将“/ ”路径映射到 exports.index<br>函数下。其中只有一个语句 res.render(‘index’, { title: ‘Express’ })，功能是<br>调用模板解析引擎，翻译名为 index 的模板，并传入一个对象作为参数</p><p>app.get(‘/‘, routes.index)，规定路径为“ /”的 GET 请求由 routes.index 函数处理。 routes.index 通过 res.render(‘index’, { title: ‘Express’ }) 调用视图模板 index，传递 title变量。最终视图模板生成 HTML 页面，返回给浏览器，</p></blockquote><p>浏览器发起请求，由路由控制器接受，根据不同的路径定向到不同的控制器。控制器处理用户的具体请求，可能会访问数据库中的对象，即模型部分.控制器还要访问模板引擎，生成视图的 HTML，最后再由控制器返回给浏览器。</p><h2 id="2-路由规则"><a href="#2-路由规则" class="headerlink" title="2.路由规则"></a>2.路由规则</h2><table><thead><tr><th>请求方式</th><th>功能</th><th>绑定函数</th></tr></thead><tbody><tr><td> GET</td><td>获取</td><td>app.get(path,callback)</td></tr><tr><td> POST</td><td>新增</td><td>app.get(path,callback)</td></tr><tr><td> PUT</td><td>更新</td><td>app.get(path,callback)</td></tr><tr><td> DELETE</td><td>删除</td><td>app.get(path,callback)</td></tr></tbody></table><p>app.all 函数，它支持把所有的请求方式绑定到同一个响应函数，</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>在路由routes/index.js下res.render的功能是调用模板引擎，并将其产生的页面直接返回给客户端。它接受两个参数，第一个是模板的名称，即views目录下的模板文件名，不包含文件的扩展名；第二个参数是传递给模板的数据，用于模板翻译</p><h3 id="ejs三种标签"><a href="#ejs三种标签" class="headerlink" title="ejs三种标签"></a>ejs三种标签</h3><ol><li>&lt;% code %&gt;： JavaScript 代码</li><li>&lt;%= code %&gt;：显示转义后的 HTML内容</li><li>&lt;%- code %&gt;：显示原始 HTML 内容</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习建立一个简易微博系统&lt;/p&gt;
&lt;h2 id=&quot;1-开始&quot;&gt;&lt;a href=&quot;#1-开始&quot; class=&quot;headerlink&quot; title=&quot;1.开始&quot;&gt;&lt;/a&gt;1.开始&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;express -e ejs ‘projectname’&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;建立项目文件&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;node ./bin/www&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;express4需要以此命令来启动,node app.js 无法启动。？？留个坑&lt;br&gt;
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>node.js学习笔记(一)</title>
    <link href="http://yoursite.com/2017/10/20/note1/"/>
    <id>http://yoursite.com/2017/10/20/note1/</id>
    <published>2017-10-20T02:00:00.000Z</published>
    <updated>2017-10-20T13:04:24.328Z</updated>
    
    <content type="html"><![CDATA[<p>node.js核心模块学习</p><h2 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h2><blockquote><p>Node.js标准库提供了http模块，其中封装了一个高效的HTTP服务器和一个简易的HTTP客户端。http.Server是一个基于事件的HTTP服务器，它的核心由Node.js下层C++部分实现，而接口由JavaScript封装，兼顾了高性能与简易性。http.request则是一个HTTP客户端工具，用于向HTTP服务器发起请求。</p></blockquote><h3 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h3><a id="more"></a><p>http.Server是http模块中的HTTP服务器对象，是一个基于事件的HTTP服务器，所有的请求都被封装为独立的事件，它继承自EventEmitter，提供了以下几个事件</p><ul><li>request：当客户端请求到来时，该事件被触发，提供两个参数req和res，分别是http.ServerRequest和http.ServerResponse的实例，表示请求和响应信息。</li><li>connection：当 TCP 连接建立时，该事件被触发，提供一个参数 socket，为net.Socket 的实例。</li><li>close ：当服务器关闭时，该事件被触发。</li></ul><p>对于request事件，http提供了一个捷径：http.createServer([<br>requestListener]),功能是创建一个HTTP服务器并将requestListener作为request 事件的监听函数。</p><p>使用http实现服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">res.write(<span class="string">'&lt;h1&gt;Node.js&lt;/h1&gt;'</span>);</div><div class="line">res.end(<span class="string">'&lt;p&gt;Hello World&lt;/p&gt;'</span>);</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"HTTP server is listening at port 3000."</span>);</div></pre></td></tr></table></figure><p>事实上的显式方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>); </div><div class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> http.Server();</div><div class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; res.writeHead(<span class="number">200</span>, </div><div class="line">&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</div><div class="line">res.write(<span class="string">'&lt;h1&gt;Node.js&lt;/h1&gt;'</span>); </div><div class="line">res.end(<span class="string">'&lt;p&gt;Hello World&lt;/p&gt;'</span>); &#125;);</div><div class="line">server.listen(<span class="number">3000</span>); </div><div class="line"><span class="built_in">console</span>.log(<span class="string">"HTTP server is listening at port 3000."</span>);</div></pre></td></tr></table></figure><h4 id="http-ServerRequest"><a href="#http-ServerRequest" class="headerlink" title="http.ServerRequest"></a>http.ServerRequest</h4><p>http.ServerRequest 是 HTTP 请求的信息，它一般由http.Server 的<br>request 事件发送，作为第一个参数传递，通常简称 request 或 req。 http.ServerRequest 提供了以下3个事件用于控制请求体传输</p><ul><li><p>data ：当请求体数据到来时，该事件被触发。该事件提供一个参数 chunk，表示接收到的数据。如果该事件没有被监听，那么请求体将会被抛弃。该事件可能会被调用多次。</p></li><li><p>end ：当请求体数据传输完成时，该事件被触发，此后将不会再有数据到来。</p></li><li>close： 用户当前请求结束时，该事件被触发。不同于 end，如果用户强制终止了传输，也还是调用close。</li></ul><h4 id="http-ServerResponse"><a href="#http-ServerResponse" class="headerlink" title="http.ServerResponse"></a>http.ServerResponse</h4><p>http.ServerResponse是返回给客户端的信息，决定了用户最终能看到的结果。它也是由 http.Server 的 request 事件发送的，作为第二个参数传递，一般简称为response 或 res。<br>http.ServerResponse 有三个重要的成员函数，用于返回响应头、响应内容以及结束请求。</p><ul><li><p>response.writeHead(statusCode, [headers])：向请求的客户端发送响应头。statusCode是HTTP状态码，如200（请求成功）、404（未找到）等。headers是一个类似关联数组的对象，表示响应头的每个属性。</p></li><li><p>response.write(data, [encoding])：向请求的客户端发送响应内容。 data 是一个 Buffer 或字符串，表示要发送的内容。如果data是字符串，那么需要指定encoding 来说明它的编码方式，默认是 utf-8。</p></li><li><p>response.end([data], [encoding])：结束响应，告知客户端所有发送已经完成。</p></li></ul><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>http 模块提供了两个函数 http.request 和 http.get，功能是作为客户端向 HTTP服务器发起请求</p><h3 id="http-request"><a href="#http-request" class="headerlink" title="http.request"></a>http.request</h3><p>http.request(options, callback)<br>发起HTTP请求。接受两个参数，option是一个类似关联数组的对象，表示请求的参数，callback是请求的回调函数。</p><p>option常用的参数:</p><ul><li>host ：请求网站的域名或 IP 地址。</li><li>port ：请求网站的端口，默认 80。</li><li>method ：请求方法，默认是 GET。</li><li>path ：请求的相对于根的路径，默认是“ /”。 QueryString 应该包含在其中。</li><li>headers ：一个关联数组对象，为请求头的内容。</li></ul><p>callback传递一个参数,为http.ClientResponse的实例。http.request返回一个http.ClientRequest的实例。</p><h3 id="http-get"><a href="#http-get" class="headerlink" title="http.get"></a>http.get</h3><p>http.get(options, callback) http 模块还提供了一个更加简便的方法用于处理GET请求：http.get。它是 http.request 的简化版，唯一的区别在于http.get自动将请求方法设为了 GET 请求，同时不需要手动调用 req.end()。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;node.js核心模块学习&lt;/p&gt;
&lt;h2 id=&quot;HTTP模块&quot;&gt;&lt;a href=&quot;#HTTP模块&quot; class=&quot;headerlink&quot; title=&quot;HTTP模块&quot;&gt;&lt;/a&gt;HTTP模块&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Node.js标准库提供了http模块，其中封装了一个高效的HTTP服务器和一个简易的HTTP客户端。http.Server是一个基于事件的HTTP服务器，它的核心由Node.js下层C++部分实现，而接口由JavaScript封装，兼顾了高性能与简易性。http.request则是一个HTTP客户端工具，用于向HTTP服务器发起请求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;HTTP服务器&quot;&gt;&lt;a href=&quot;#HTTP服务器&quot; class=&quot;headerlink&quot; title=&quot;HTTP服务器&quot;&gt;&lt;/a&gt;HTTP服务器&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>第二天</title>
    <link href="http://yoursite.com/2017/10/19/second-blog/"/>
    <id>http://yoursite.com/2017/10/19/second-blog/</id>
    <published>2017-10-19T04:00:00.000Z</published>
    <updated>2017-10-22T13:42:49.784Z</updated>
    
    <content type="html"><![CDATA[<p>测试用博客</p><h2 id="需要完善的地方"><a href="#需要完善的地方" class="headerlink" title="需要完善的地方"></a>需要完善的地方</h2><p> 添加阅读全文，显示文章一部分</p><p> 添加评论留言功能</p><h2 id="后续任务"><a href="#后续任务" class="headerlink" title="后续任务"></a>后续任务</h2><p> nodejs学习</p> <a id="more"></a><p> 搭建网站</p><p> 捋一捋搭建步骤</p><ol><li>搭建环境，node.js，git，github账户及pages，ssh配置</li><li>安装hexo，配置本地blog文件夹，配置deployment到github</li><li>安装主题（Next）并配置个性设置</li><li>绑定域名，添加解析记录</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试用博客&lt;/p&gt;
&lt;h2 id=&quot;需要完善的地方&quot;&gt;&lt;a href=&quot;#需要完善的地方&quot; class=&quot;headerlink&quot; title=&quot;需要完善的地方&quot;&gt;&lt;/a&gt;需要完善的地方&lt;/h2&gt;&lt;p&gt; 添加阅读全文，显示文章一部分&lt;/p&gt;
&lt;p&gt; 添加评论留言功能&lt;/p&gt;
&lt;h2 id=&quot;后续任务&quot;&gt;&lt;a href=&quot;#后续任务&quot; class=&quot;headerlink&quot; title=&quot;后续任务&quot;&gt;&lt;/a&gt;后续任务&lt;/h2&gt;&lt;p&gt; nodejs学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="Test" scheme="http://yoursite.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>helloworld</title>
    <link href="http://yoursite.com/2017/10/18/hello-world/"/>
    <id>http://yoursite.com/2017/10/18/hello-world/</id>
    <published>2017-10-18T12:00:00.000Z</published>
    <updated>2017-10-19T13:13:41.021Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客<a href="https://wannafly.xyz/" target="_blank" rel="external">https://wannafly.xyz/</a>! This is my first blog.</p><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><h2 id="今天搭建博客遇到的问题"><a href="#今天搭建博客遇到的问题" class="headerlink" title="今天搭建博客遇到的问题"></a>今天搭建博客遇到的问题</h2><h3 id="关于hexo配置"><a href="#关于hexo配置" class="headerlink" title="关于hexo配置"></a>关于hexo配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure><p>需要在空文件夹中进行初始化框架<br><a id="more"></a></p><h3 id="关于全局安装"><a href="#关于全局安装" class="headerlink" title="关于全局安装"></a>关于全局安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure><p>全局安装需要在cmd管理员模式下进行，文件夹下按住shift右键即可在当前位置打开cmd<br>直接在git bash中安装hexo</p><h3 id="关于ssh"><a href="#关于ssh" class="headerlink" title="关于ssh"></a>关于ssh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config user.name</div><div class="line">$ git config user.email</div></pre></td></tr></table></figure><p>username: wanna_smile</p><h3 id="关于主题配置文件"><a href="#关于主题配置文件" class="headerlink" title="关于主题配置文件"></a>关于主题配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme： next</div></pre></td></tr></table></figure><p>在：后要加上一个<strong>空格</strong></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>CNAME文件应在根目录source文件夹下创建，直接在github上创建会自动删除<br>参考<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="external">教程</a></p><p>女神结楼<br><img src="/img/foot.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到我的博客&lt;a href=&quot;https://wannafly.xyz/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://wannafly.xyz/&lt;/a&gt;! This is my first blog.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;今天搭建博客遇到的问题&quot;&gt;&lt;a href=&quot;#今天搭建博客遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;今天搭建博客遇到的问题&quot;&gt;&lt;/a&gt;今天搭建博客遇到的问题&lt;/h2&gt;&lt;h3 id=&quot;关于hexo配置&quot;&gt;&lt;a href=&quot;#关于hexo配置&quot; class=&quot;headerlink&quot; title=&quot;关于hexo配置&quot;&gt;&lt;/a&gt;关于hexo配置&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要在空文件夹中进行初始化框架&lt;br&gt;
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
</feed>
